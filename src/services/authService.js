// src/services/authService.js
const API_BASE_URL = 'http://localhost:8797/api'

// Create axios instance
const apiClient = {
    post: async (url, data) => {
        const response = await fetch(`${API_BASE_URL}${url}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(data)
        })
        return { data: await response.json() }
    },
    get: async (url) => {
        const response = await fetch(`${API_BASE_URL}${url}`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
            }
        })
        return { data: await response.json() }
    }
}

export const authService = {
    // Regular login
    login: async (userName, password) => {
        try {
            console.log('üîÑ Attempting login for:', userName)
            const response = await apiClient.post('/auth/login', {
                userName,
                password
            })

            console.log('Login response:', response.data)

            if (response.data.success) {
                return {
                    success: true,
                    data: response.data.data,
                    message: 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng!'
                }
            }

            return {
                success: false,
                message: response.data.message || 'ƒêƒÉng nh·∫≠p th·∫•t b·∫°i!'
            }
        } catch (error) {
            console.error('Login error:', error)
            return {
                success: false,
                message: 'ƒêƒÉng nh·∫≠p th·∫•t b·∫°i!',
                error: error.message
            }
        }
    },

    // Register
    register: async (userName, password, email) => {
        try {
            console.log('üîÑ Attempting register for:', { userName, email })
            const response = await apiClient.post('/auth/register', {
                userName,
                password,
                email
            })

            console.log('Register response:', response.data)

            if (response.data.success) {
                return {
                    success: true,
                    data: response.data.data,
                    message: response.data.message || 'ƒêƒÉng k√Ω th√†nh c√¥ng!'
                }
            }

            return {
                success: false,
                message: response.data.message || 'ƒêƒÉng k√Ω th·∫•t b·∫°i!'
            }
        } catch (error) {
            console.error('Register error:', error)
            return {
                success: false,
                message: 'ƒêƒÉng k√Ω th·∫•t b·∫°i!',
                error: error.message
            }
        }
    },

    // Verify OTP
    verifyOtp: async (email, otp) => {
        try {
            console.log('üîÑ Verifying OTP for:', email)
            const response = await apiClient.post('/auth/verify-otp', {
                email,
                otp
            })

            console.log('Verify OTP response:', response.data)

            if (response.data.success) {
                return {
                    success: true,
                    data: response.data.data,
                    message: 'X√°c th·ª±c email th√†nh c√¥ng!'
                }
            }

            return {
                success: false,
                message: response.data.message || 'M√£ OTP kh√¥ng h·ª£p l·ªá!'
            }
        } catch (error) {
            console.error('Verify OTP error:', error)
            return {
                success: false,
                message: 'X√°c th·ª±c th·∫•t b·∫°i!',
                error: error.message
            }
        }
    },

    // Google Login - Redirect to backend
    loginWithGoogle: () => {
        console.log('üîÑ Redirecting to Google OAuth...')
        window.location.href = `${API_BASE_URL}/auth/google`
    },

    // Handle Google callback from URL parameters
    handleGoogleCallback: async (urlParams) => {
        try {
            const token = urlParams.get('token')
            const userStr = urlParams.get('user')
            const error = urlParams.get('error')

            console.log('üîç Google callback params:', {
                hasToken: !!token,
                hasUser: !!userStr,
                hasError: !!error,
                tokenValue: token ? `${token.substring(0, 20)}...` : 'NULL',
                errorValue: error
            })

            if (error) {
                return {
                    success: false,
                    message: 'ƒêƒÉng nh·∫≠p Google th·∫•t b·∫°i!',
                    error: error
                }
            }

            // ‚úÖ Ch·ªâ c·∫ßn c√≥ token l√† ƒë·ªß
            if (token) {
                let user

                // N·∫øu c√≥ user data t·ª´ URL
                if (userStr) {
                    try {
                        user = JSON.parse(decodeURIComponent(userStr))
                        console.log('üë§ User from URL:', user)
                    } catch (parseError) {
                        console.warn('‚ö†Ô∏è Failed to parse user from URL:', parseError)
                        user = null
                    }
                }

                // ‚úÖ N·∫øu kh√¥ng c√≥ user data, decode t·ª´ JWT token
                if (!user) {
                    try {
                        const tokenPayload = JSON.parse(atob(token.split('.')[1]))
                        console.log('üîì Decoded token payload:', tokenPayload)

                        user = {
                            id: tokenPayload.userId,
                            userName: tokenPayload.userName,
                            email: tokenPayload.email,
                            loginMethod: 'google'
                        }
                        console.log('üë§ User from token:', user)
                    } catch (decodeError) {
                        console.error('‚ùå Failed to decode token:', decodeError)
                        // Fallback user object
                        user = {
                            userName: 'Google User',
                            email: 'user@gmail.com',
                            loginMethod: 'google'
                        }
                        console.log('üë§ Using fallback user:', user)
                    }
                }

                // Store in localStorage
                localStorage.setItem('authToken', token)
                localStorage.setItem('userData', JSON.stringify(user))

                console.log('‚úÖ Google callback successful!')
                return {
                    success: true,
                    data: { token, user },
                    message: 'ƒêƒÉng nh·∫≠p Google th√†nh c√¥ng!'
                }
            }

            // ‚úÖ Kh√¥ng c√≥ token
            console.error('‚ùå No token found in callback')
            return {
                success: false,
                message: 'Kh√¥ng nh·∫≠n ƒë∆∞·ª£c token t·ª´ Google!',
                error: 'Missing token'
            }

        } catch (error) {
            console.error('‚ùå Google callback processing error:', error)
            return {
                success: false,
                message: 'X·ª≠ l√Ω callback Google th·∫•t b·∫°i!',
                error: error.message
            }
        }
    }
}